// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  reviews Review[]

  products Product[] @relation("OwnProducts")

  productsInCart    Product[] @relation("ProductsInCart", fields: [productsInCartIds], references: [id])
  productsInCartIds String[]  @db.ObjectId

  productsLiked    Product[] @relation("ProductsLiked", fields: [productsLikedIds], references: [id])
  productsLikedIds String[]  @db.ObjectId

  //Orders made by the user
  orders Order[]

  //Product order from users
  orderProds OrderProd[]
}

model Product {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  price         Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  productImages ProductImage[]
  stock         Int
  //Owner
  user          User?          @relation("OwnProducts", fields: [userId], references: [id])
  userId        String?        @db.ObjectId

  //Relation to Category model
  category   Category[] @relation(fields: [categoryId], references: [id])
  categoryId String[]   @db.ObjectId

  //Relation to QuestionAnswer model
  questionsAnswers QuestionAnswer[]

  //Relation to Review model
  reviews Review[]

  //How have it in its cart
  inUserCart   User[]   @relation("ProductsInCart", fields: [inUserCartId], references: [id])
  inUserCartId String[] @db.ObjectId

  //How saved it as liked product
  likedBy   User[]   @relation("ProductsLiked", fields: [likedById], references: [id])
  likedById String[] @db.ObjectId

  //If the product was not made by a real user
  demostration Boolean @default(false)

  //Intermediary for product and order
  orderProds OrderProd[]
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  isPaid    Boolean  @default(false)
  phone     String   @default("")
  address   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //User how create the order
  buyer   User   @relation(fields: [buyerId], references: [id])
  buyerId String @db.ObjectId

  //Product to order
  orderProds OrderProd[]
}

model OrderProd {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @db.ObjectId

  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  seller   User   @relation(fields: [sellerId], references: [id])
  sellerId String @db.ObjectId
}

model Review {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  stars   Int
  comment String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId

  writer   User   @relation(fields: [writerId], references: [id])
  writerId String @db.ObjectId
}

model QuestionAnswer {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  products   Product[] @relation(fields: [productsId], references: [id])
  productsId String[]  @db.ObjectId
}

model ProductImage {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  access_mode   String?
  api_key       String?
  asset_id      String?
  bytes         Int?
  created_at    DateTime?
  etag          String?
  folder        String?
  format        String?
  height        Int?
  placeholder   Boolean?
  public_id     String?
  resource_type String?
  secure_url    String?
  signature     String?
  tags          String[]
  type          String?
  url           String?
  version       Int?
  version_id    String?
  width         Int?
  pages         Int?

  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  @db.ObjectId
}
